name: Run source distribution tests

on:
  push:
  pull_request:
    branches-ignore: [ master ]

jobs:
  # First we need to see if there have been any changes made to the requirements files.
  # If there are changes, we need to update the lockfiles to match.
  update-lockfiles:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11"]
        os: [macOS-latest, windows-latest]
    steps:
    - uses: actions/checkout@v3
      with:
        ref: ${{ github.event.pull_request.head.ref }}
        token: ${{ secrets.pat }}
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install -r requirements-test.txt
    # Windows and posix have different syntax for setting the outputs and env vars
    # in github actions so we need to duplicate the next step one for windows and
    # one for macOS.
    - name: Regenerate windows files
      if: runner.os == 'Windows'
      run: |
        python scripts/regenerate-lock-files
        echo "CHANGES=$(git status --porcelain=v1)" >> $env:GITHUB_ENV
        echo "CHANGES=$(git status --porcelain=v1)" >> $env:GITHUB_OUTPUT
    - name: Regenerate lock files
      if: runner.os != 'Windows'
      run: |
        python scripts/regenerate-lock-files
        echo "CHANGES=$(git status --porcelain=v1)" >> $GITHUB_ENV
        echo "CHANGES=$(git status --porcelain=v1)" >> $GITHUB_OUTPUT
    # If changes were created when running the regenerate-lock-files script
    # then the new lock files need to be commited and pushed to the branch.
    - name: git commit and push updated lock files
      if: ${{ env.CHANGES }}
      env:
        CI_COMMIT_AUTHOR: Github Actions
      run: |
        git config --global user.name "${{ env.CI_COMMIT_AUTHOR }}"
        git config --global user.email "<>"
        git fetch
        git add requirements
        git commit -m "Regenerate lock files for ${{ runner.os }}"
        git pull --rebase
        git push

  source-distribution-tests:
    runs-on: ${{ matrix.os }}
    # We wait to run the tests until the result of the update-lockfiles
    # job is known. If there were changes generated then we do NOT want to run
    # the tests since we know they will fail, since the lock files will not
    # match what is expected.
    # If there were changes pushed up from the prior job, that commit will
    # trigger this workflow again. In that run, the regenerate-lock-files should
    # generate no differences, and the tests will run.
    # If there were no changes, then we can run the tests.
    needs: update-lockfiles
    if: ${{ needs.update-lockfiles.outputs.CHANGES }} == ""
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
        os: [ubuntu-latest, macOS-latest, windows-latest]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python scripts/ci/install
        python scripts/ci/install-build-system
        python -m pip freeze --all
    - name: Run build-system tests
      run: |
        pip uninstall -y awscli
        python scripts/ci/run-build-system-tests
